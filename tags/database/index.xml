<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on hshsh&#39;s little site</title>
    <link>http://hshsh.me/tags/database/</link>
    <description>Recent content in Database on hshsh&#39;s little site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 06 Aug 2016 10:17:25 +0800</lastBuildDate>
    <atom:link href="http://hshsh.me/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>升级Windows导致Postgresql服务无法启动问题</title>
      <link>http://hshsh.me/post/2016-08-06-fix-postgresql-permission-issue-again/</link>
      <pubDate>Sat, 06 Aug 2016 10:17:25 +0800</pubDate>
      
      <guid>http://hshsh.me/post/2016-08-06-fix-postgresql-permission-issue-again/</guid>
      <description>&lt;p&gt;这两天升级系统到了Windows 10.1，结果Postgresql数据库又起不来了，之前重做Windows 7的时候就遇到过这个问题，但是不记得是怎么搞定的了。&lt;/p&gt;

&lt;p&gt;查了一堆资料，基本断定问题是由于升级操作系统后，Windows建立新用户，用户SID改变导致的。可是网上始终也没有找到个有效的解决方法。记得上次就是这样，最后只能再次祭出大招，下载EnterpriseDB的安装包，重装一遍，查看它的服务进程登录用户和文件目录权限。&lt;/p&gt;

&lt;p&gt;这里记录一下，以免下次又忘了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;服务进程登录用户：&amp;rdquo;NT AUTHORITY\NetworkService&amp;rdquo;&lt;/li&gt;
&lt;li&gt;服务进程启动命令：C:/path/to/pg_ctl.exe runservice -N &amp;ldquo;pgsql&amp;rdquo; -D &amp;ldquo;E:/path/to/data&amp;rdquo; -w&lt;/li&gt;
&lt;li&gt;数据目录OWNER：Administrators (COMPUTER\Administrators)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外数据目录上要确保下面两个权限：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NETWORK SERVICE：完全控制&lt;/li&gt;
&lt;li&gt;本地登录用户（COMPUTER\username）：完全控制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的权限系统默认就行了，具体权限设置就不记录了，从Cygwin开始就对着权限搞来搞去，现在Postgresql又搞权限问题，已经是轻车熟路了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL &amp; SQL 常用命令笔记</title>
      <link>http://hshsh.me/post/2016-04-27-mysql-sql-commands-notes/</link>
      <pubDate>Wed, 27 Apr 2016 11:42:00 +0800</pubDate>
      
      <guid>http://hshsh.me/post/2016-04-27-mysql-sql-commands-notes/</guid>
      <description>

&lt;h2 id=&#34;查看数据库和数据表结构&#34;&gt;查看数据库和数据表结构&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u user -p
mysql&amp;gt; show databases;
mysql&amp;gt; show tables;
mysql&amp;gt; use {DATABASE_NAME};
mysql&amp;gt; show columns from {TABLE_NAME};
mysql&amp;gt; show create table {TABLE_NAME};
mysql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;变更数据表结构&#34;&gt;变更数据表结构&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;# 重命名字段并可选修改字段类型
alter table {TABLE_NAME} change {OLD_COLUMN} {NEW_COLUMN} {COLUMN_TYPE};
# 修改字段类型不重命名字段
alter table {TABLE_NAME} modify {COLUMN_NAME} {COLUMN_TYPE};
# 增加字段
alter table {TABLE_NAME} add column {COLUMN_NAME} {COLUMN_TYPE};
# 删除字段
alter table {TABLE_NAME} drop column {COLUMN_NAME};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;快速批量加载数据到数据库&#34;&gt;快速批量加载数据到数据库&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: 下面命令中&lt;code&gt;{...}&lt;/code&gt;表示必填参数，&lt;code&gt;[...]&lt;/code&gt;表示选项参数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;# 逗号分隔的 csv 文件, 字段列表可选
load data local infile &amp;quot;/path/to/file.csv&amp;quot; into table {TABLE_NAME}
fileds terminated by &#39;,&#39; [(field1, field2, field3, ...)];
# 制表符分隔的 txt 文件, 字段列表可选
laod data local infile &amp;quot;/path/to/file.txt&amp;quot; into table {TABLE_NAME}
[(field1, field2, field3, ...)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可能会遇到&lt;code&gt;ERROR 1148 (42000): The used command is not allowed with this
MySQL version&lt;/code&gt;的错误提示，错误原因是编译安装&lt;code&gt;mysql&lt;/code&gt;的时候没有指定&lt;code&gt;--enable-local-infile&lt;/code&gt;
选项，除了重新编译安装加上上面的参数外，还可以直接使用命令行执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u user -p {DATABASE_NAME} --local-infile=1 -e &#39;load data local \
  infile &amp;quot;/path/to/file.txt&amp;quot; into {TABLE_NAME} [(field1, field2, field3, ...)];&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;数据库导出操作&#34;&gt;数据库导出操作&lt;/h2&gt;

&lt;p&gt;导出全部数据库备份到本地目录:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysqldump -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --routines \
  --default-character-set=utf8 --locak-all-tables --add-drop-database -A \
  &amp;gt; db.all.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出指定数据库到本地目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysqldump -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --routines \
  --default-character-set=utf8 --databases {DATABASE_NAME} &amp;gt; db.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出某个数据库的表到本地目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysqldump -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --routines \
  --default-character-set=utf8 --tables {DATABASE_NAME} {TABLE_NAME} \
  &amp;gt; db.table.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出指定数据库的表（仅数据，可带过滤条件）到本地目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysqldump -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --routines \
  --default-character-set=utf8 --no-create-db --no-create-info \
  --tables {DATABASE_NAME} {TABLE_NAME} \
  [--where=&amp;quot;host=&#39;localhost&#39;&amp;quot;] &amp;gt; db.table.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出数据库的所有表结构：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysqldump -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --routines \
  --default-character-set=utf8 --no-data --databases {DATABASE_NAME} \
  &amp;gt; db.nodata.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出某个查询SQL的数据为 txt 格式文件到本地目录，各数据值之间用制表符分隔：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --default-character-set=utf8 \
  --skip-column-names -B -e &#39;select ... from ... ;&#39; &amp;gt; /path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出某个查询SQL的数据为 csv 格式文件到服务器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --default-character-set=UTF8
mysql&amp;gt; select ... from ... into outfile &#39;/path/to/file.csv&#39; fields terminated by &#39;,&#39;;
mysql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;数据库导入操作&#34;&gt;数据库导入操作&lt;/h2&gt;

&lt;p&gt;恢复全库数据到MySQL，因为包含mysql库的权限表，导入完成后需要执行
&lt;code&gt;FLUSH PRIVILEGES;&lt;/code&gt;命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u$USER -p$PASSWORD -h127.0.0.1 -P3306 \
  --default-character-set=UTF8 &amp;lt; db.all.sql

# 方法二
$ mysql -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --default-=character-set=UTF8
mysql&amp;gt; source /path/to/db.all.sql
mysql&amp;gt; flush privileges;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恢复某个数据库：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u$USER -p$PASSWORD -h$HOST -P$PORT --default-character-set=UTF8 \
  {DATABASE_NAME} &amp;lt; db.table.sql

# 方法二
$ mysql -u$USER -p$PASSWORD -h$HOST -P$PORT --default-character-set=UTF8
mysql&amp;gt; use {DATABASE_NAME};
mysql&amp;gt; source /path/to/db.table.sql;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恢复MySQL服务器上面的 txt 格式文件（需要FILE权限，数据值之间用制表符分隔）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u$USER -p$PASSWORD -h$HOST -P$PORT --default-character-set=UTF8
mysql&amp;gt; use {DATABASE_NAME};
mysql&amp;gt; load data infile &#39;/path/to/file.txt&#39; into table {TABLE_NAME};
mysql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恢复MySQL服务器上的 csv 格式文件（需要FILE权限，数据值之间用逗号分隔）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u$USER -p$PASSWORD -h$HOST -P$PORT --default-character-set=UTF8
mysql&amp;gt; use {DATABASE_NAME};
mysql&amp;gt; load data infile &#39;/path/to/file.csv&#39; into table {TABLE_NAME}
mysql&amp;gt; fields terminated by &#39;,&#39;;
mysql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恢复本地的 txt 或 csv 文件到MySQL：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u$USER -p$PASSWORD -h$HOST -P$PORT --default-character-set=UTF8
mysql&amp;gt; use {DATABASE_NAME};
mysql&amp;gt; load data local infile &#39;/path/to/file.txt&#39; into table {TABLE_NAME};
mysql&amp;gt; load data local infile &#39;/path/to/file.csv&#39; into table {TABLE_NAME}
mysql&amp;gt; fields terminated by &#39;,&#39;;
mysql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;常用命令参数说明&#34;&gt;常用命令参数说明&lt;/h2&gt;

&lt;p&gt;mysqldump参数说明：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;-A&lt;/strong&gt;: 全库备份&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;routines&lt;/strong&gt;: 备份存储过程和函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;default-character-set=utf8&lt;/strong&gt;: 设置连接字符集&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;lock-all-tables&lt;/strong&gt;: 全局一致性锁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;add-drop-database&lt;/strong&gt;: 在每次执行建表语句之前，先执行&lt;code&gt;drop table if exist&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;no-create-db&lt;/strong&gt;: 不输出&lt;code&gt;create database&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;no-create-info&lt;/strong&gt;: 不输出&lt;code&gt;create table&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;databases&lt;/strong&gt;: 将后面的参数都解析为数据库名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tables&lt;/strong&gt;: 第一个参数为数据库名，后续参数为数据表名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;mysql参数说明：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;skip-column-names&lt;/strong&gt;: 不显示数据列的名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-B&lt;/strong&gt;: 以批处理的方式运行mysql程序，查询结果将显示为制表符间隔格式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-e&lt;/strong&gt;: 执行命令后退出&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;LOAD DATA&lt;/code&gt;语法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果&lt;code&gt;LOAD DATA&lt;/code&gt;语句不带&lt;code&gt;LOCAL&lt;/code&gt;关键字，就在MySQL的服务器上直接读取文件，
需要具有FILE权限&lt;/li&gt;
&lt;li&gt;如果带有&lt;code&gt;LOCAL&lt;/code&gt;关键字，就在客户端本地读取数据文件，通过网络传输到MySQL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOAD DATA&lt;/code&gt;语句，同样会被记录到&lt;code&gt;binlog&lt;/code&gt;，不过是MySQL内部的机制&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;设置默认使用utf8编码&#34;&gt;设置默认使用utf8编码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;# configuration in file /etc/mysql/my.cnf
[client]
# 客户端连接
default-character-set = utf8
[mysql]
# 命令行工具
default-character-set = utf8
[mysqld]
# 服务器默认字符集
character-set-server = utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysqld-服务管理&#34;&gt;mysqld 服务管理&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo service mysql {start | stop | restart}
$ sudo /etc/init.d/mysql {start | stop | restart}

# safe 模式启动
$ sudo safe_mysqld &amp;amp;

# mysqld 守护进程管理程序.
$ mysqladmin shutdown
$ mysqladmin --help
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>XtraBackup热备份MySQL主从同步笔记</title>
      <link>http://hshsh.me/post/2016-04-26-mysql-hot-backup-with-xtrabackup/</link>
      <pubDate>Tue, 26 Apr 2016 18:30:00 +0800</pubDate>
      
      <guid>http://hshsh.me/post/2016-04-26-mysql-hot-backup-with-xtrabackup/</guid>
      <description>

&lt;p&gt;公司的MySQL数据库单实例裸跑了一个多月，今天终于做了主从同步，暂时主要起备份作用，庆幸这段时间没有发生意外。&lt;/p&gt;

&lt;p&gt;先说主要的参考资料，强烈推荐阅读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wsgzao.github.io/post/xtrabackup/&#34;&gt;XtraBackup不停机不锁表搭建MySQL主从同步实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://seanlook.com/2015/12/14/mysql-replicas/&#34;&gt;使用 Xtrabackup 在线对MySQL做主从复制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000002575399&#34;&gt;通过XtraBackup实现不停机不锁表搭建主从同步&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;更新历史&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;2016-04-26: 初稿.&lt;/p&gt;

&lt;p&gt;2016-12-19:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;修复 innobackupex 命令错误: &amp;ldquo;xtrabackup: Error: &amp;ndash;defaults-file must be specified first on the command line&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;添加 &amp;ldquo;主从复制心跳和连接超时&amp;rdquo; 内容.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;转载一下主从同步和XtraBackup的简介：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MySQL主从同步原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MySQL主从同步是在MySQL主从复制(Master-Slave Replication)基础上实现的，通过设置在Master MySQL上的binlog(使其处于打开状态)，Slave MySQL上通过一个I/O线程从Master MySQL上读取binlog，然后传输到Slave MySQL的中继日志中，然后Slave MySQL的SQL线程从中继日志中读取中继日志，然后应用到Slave MySQL的数据库中。这样实现了主从数据同步功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XtraBackup备份原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;innobackupex在后台线程不断追踪InnoDB的日志文件，然后复制InnoDB的数据文件。数据文件复制完成之后，日志的复制线程也会结束。这样就得到了不在同一时间点的数据副本和开始备份以后的事务日志。完成上面的步骤之后，就可以使用InnoDB崩溃恢复代码执行事务日志（redo log），以达到数据的一致性。&lt;/p&gt;

&lt;p&gt;备份分为两个过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;backup，备份阶段，追踪事务日志和复制数据文件（物理备份）。&lt;/li&gt;
&lt;li&gt;preparing，重放事务日志，使所有的数据处于同一个时间点，达到一致性状态。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;XtraBackup的优点&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可以快速可靠的完成数据备份（复制数据文件和追踪事务日志）&lt;/li&gt;
&lt;li&gt;数据备份过程中不会中断事务的处理（热备份）&lt;/li&gt;
&lt;li&gt;节约磁盘空间和网络带宽&lt;/li&gt;
&lt;li&gt;自动完成备份鉴定&lt;/li&gt;
&lt;li&gt;因更快的恢复时间而提高在线时间&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;操作笔记&#34;&gt;操作笔记&lt;/h2&gt;

&lt;p&gt;参考的两篇文章里面说的挺详细的，但是有部分命令和命令执行顺序写的不大明白，这里简单记录以下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;完整的步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;主、从服务器上都搭好MySQL服务，从服务器上MySQL版本大于等于主服务器，最好完全一致&lt;/li&gt;
&lt;li&gt;在要做主从同步的服务器上分别安装XtraBackup&lt;/li&gt;
&lt;li&gt;如果从服务器上有MySQL实例，停掉服务，备份删除数据库内容，保留数据库目录&lt;/li&gt;
&lt;li&gt;配置主从服务器打开主从同步功能&lt;/li&gt;
&lt;li&gt;主服务器上执行备份&lt;/li&gt;
&lt;li&gt;传输备份文件到从服务器，并同步数据文件（apply-log）&lt;/li&gt;
&lt;li&gt;从服务器上恢复备份&lt;/li&gt;
&lt;li&gt;主服务器上授权同步帐号&lt;/li&gt;
&lt;li&gt;从服务器上设置MASTER并开启同步&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完成，可以检查同步状态了！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;具体操作过程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NOTE：以下命令以普通用户权限运行，如果需要ROOT权限，均使用&lt;code&gt;sudo&lt;/code&gt;执行。默认均使用Ubuntu发行版仓库中的MySQL，版本比较旧，如果使用官方发行版本，需要注意相关选项、目录等配置。&lt;/p&gt;

&lt;p&gt;一、主从服务器上搭建MySQL服务，并检查MySQL版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# master &amp;amp; slave
sudo apt-get install mysql-server
mysql --version
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;mysql  Ver 14.14 Distrib 5.5.49, for debian-linux-gnu (x86_64) using readline 6.3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;二、主从服务器上分别安装XtraBackup，根据官方网站指导使用打包好的二进制，选择最新的稳定版2.4：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# master &amp;amp; slave
wget https://repo.percona.com/apt/percona-release_0.1-3.$(lsb_release -sc)_all.deb
sudo dpkg -i percona-release_0.1-3.$(lsb_release -sc)_all.deb
sudo apt-get update
sudo apt-get install percona-xtrabackup-24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三、停掉从服务器上MySQL服务，备份原有数据库，并删除原有数据库内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysqldump -u$USER -p$PASSWORD -h127.0.0.1 -P3306 --routines \
  --default-character-set=utf8 --locak-all-tables --add-drop-database -A \
  db.all.sql
sudo service mysql stop
sudo cd /var/lib/mysql
# 下面这句千万别打错了，后果会很严重
sudo rm -rf ./*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;四、配置MySQL打开主从同步功能&lt;/p&gt;

&lt;p&gt;主服务器上编辑&lt;code&gt;/etc/mysql/my.conf&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;[mysqld]
# 注意主从之间的server-id不能相同
server-id    = 1
log_bin      = /var/log/mysql/mysql-bin.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果主服务器上MySQL是已经上线的系统，需要重启一下（实测&lt;code&gt;/etc/init.d/mysql reload&lt;/code&gt;不起作用）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo service mysql restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从服务器上编辑&lt;code&gt;/etc/mysql/my.conf&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;[mysqld]
# 注意主从之间的server-id不能相同
server-id    = 2
# 最好设置从服务器为只读
# 注意：即使这里设置了只读，使用具有super权限的用户登录，也还是可以做写操作的
read_only    = ON
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查询主从服务器状态：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -u USER -p PASSWD -e &amp;quot;show global variables like &#39;server-id&#39;;&amp;quot;
    +---------------+-------+
    | Variable_name | Value |
    +---------------+-------+
    | server_id     | 1     |
    +---------------+-------+

mysql -u USER -p PASSWD -e &amp;quot;show global variables like &#39;log_bin&#39;;&amp;quot;
    +---------------+-------+
    | Variable_name | Value |
    +---------------+-------+
    | log_bin       | ON    |
    +---------------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;五、主服务器上执行备份操作&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo innobackupex --defaults-file=/etc/mysql/my.cnf --user=USER --password \
  --parallel=4 /tmp/mybackup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令输出的最后几行通常类似这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;innobackupex: Backup created in directory &#39;/tmp/mybackup/2016-04-26_17-41-51&#39;
innobackupex: MySQL binlog position: filename &#39;mysql-bin.000003&#39;, position 1946
111225 00:00:53 innobackupex: completed OK!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令执行完在&lt;code&gt;/tmp/mybackup&lt;/code&gt;目录下生成的&lt;code&gt;2016-04-26_17-41-51&lt;/code&gt;目录，里面存储的是备份的数据，下一步要传输到从服务器上的即是这个文件夹。&lt;/p&gt;

&lt;p&gt;输出中的&lt;code&gt;MySQL binlog position: filename &#39;mysql-bin.000003&#39;, position 1946&lt;/code&gt;里面的两个数字，要记录以下，后面恢复到从服务器上的时候要用到。&lt;/p&gt;

&lt;p&gt;六、传输并同步备份数据&lt;/p&gt;

&lt;p&gt;读取备份数据需要ROOT权限，下面的命令需要使用sudo执行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /tmp/mybackup
sudo scp -r /tmp/mybackup/2016-04-26_17-44-49 USER@SLAVE:/tmp/mybackup/2016-04-26
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在从服务器上执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo innobackupex --apply-log /tmp/mybackup/2016-04-26
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;七、从服务器上恢复备份数据&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 恢复数据
sudo innobackupex --defaults-file=/etc/mysql/my.cnf --user=USER --password \
  --copy-back /tmp/mybackup/2016-04-26/
# 需要恢复权限给mysql
sudo chown -R mysql:mysql /var/lib/mysql
# 启动MySQL
sudo service mysql start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: 如果从数据库存在多个MySQL，执行命令有所不同，请另行查阅相关资料。&lt;/p&gt;

&lt;p&gt;八、主服务器上授权同步帐号&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;mysql -u USER -p PASSWD -h HOST -P PORT
&amp;gt; grant replication slave on *.* to &#39;slave&#39;@&#39;10.10.16.24&#39; identified by &#39;slave_passport&#39;;
&amp;gt; flush privileges;
&amp;gt;
&amp;gt; select distinct concat(&#39;User: &#39;&#39;&#39;,user,&#39;&#39;&#39;@&#39;&#39;&#39;,host,&#39;&#39;&#39;;&#39;) as query from mysql.user;
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一条语句查询当前数据库中的用户信息，检查&lt;code&gt;slave_passport&lt;/code&gt;是否在其中。&lt;/p&gt;

&lt;p&gt;九、配置从服务器开启同步&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;mysql -u USER -p PASSWD -h HOST -p PORT
&amp;gt; change master to
&amp;gt; master_host = &#39;10.10.16.51&#39;,
&amp;gt; master_user = &#39;slave&#39;,
&amp;gt; master_password = &#39;slave_password&#39;,
&amp;gt; master_port = 3306,
&amp;gt; master_log_file = &#39;mysql-bin.000003&#39;,
&amp;gt; master_log_pos = 1946;
&amp;gt;
&amp;gt; start slave;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看主库同步状态：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -u USER -p PASSWD -h MASTER_HOST -P MASTER_PORT \
  -e &amp;quot;show master status \G;&amp;quot;
mysql -u USER -p PASSWD -h SLAVE_HOST -P SLAVE_PORT \
  -e &amp;quot;show processlist \G;&amp;quot; | grep -i &#39;master&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查第二条命令输出是否类似“State: Master has sent all binlog to slave; waiting for binlog to be updated”这样。&lt;/p&gt;

&lt;p&gt;查看从库同步状态：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -u USER -p PASSWD -h SLAVE_HOST -P SLAVE_PORT \
  -e &amp;quot;show slave status \G;&amp;quot;
mysql -u USER -p PASSWD -h SLAVE_HOST -P SLAVE_PORT \
  -e &amp;quot;show processlist \G;&amp;quot; | egrep -i &#39;(master|slave)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查命令输出是否包含类似下面这样的语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Slave_IO_State: Waiting for master to send event
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it

State: Waiting for master to send event
State: Slave has read all relay log; waiting for the slave I/O thread to update it
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql主从切换&#34;&gt;MySQL主从切换&lt;/h2&gt;

&lt;p&gt;这里暂时还没有用到主从切换，不过参考资料&lt;a href=&#34;http://wsgzao.github.io/post/xtrabackup/&#34;&gt;XtraBackup不停机不锁表搭建MySQL主从同步实践&lt;/a&gt;中有写到主从切换的过程，复制粘贴一下以后好找：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;#查看主库状态
show processlist;
Master has sent all binlog to slave; waiting for binlog to be updated
show master status \G

#从库停止 IO_THREAD 线程
stop slave IO_THREAD;
show processlist;
Slave has read all relay log; waiting for the slave I/O thread to update it
show slave status \G

#从库切换为主库
stop slave;
reset master;
reset slave all;
show master status \G

#激活帐户
SELECT DISTINCT CONCAT(&#39;User: &#39;&#39;&#39;,user,&#39;&#39;&#39;@&#39;&#39;&#39;,host,&#39;&#39;&#39;;&#39;) AS query FROM mysql.user;
GRANT REPLICATION SLAVE ON *.* TO &#39;slave_passport&#39;@&#39;10.10.16.51&#39; IDENTIFIED BY &#39;slave_passport&#39;;
FLUSH PRIVILEGES;

#切换原有主库为从库
reset master;
reset slave all;

CHANGE MASTER TO
MASTER_HOST=&#39;10.10.16.24&#39;,
MASTER_USER=&#39;slave_passport&#39;,
MASTER_PASSWORD=&#39;slave_passport&#39;,
MASTER_PORT=3306,
MASTER_LOG_FILE=&#39;mysql-bin.000001&#39;,
MASTER_LOG_POS=804497686;

#检查主库
SHOW PROCESSLIST;
show master status \G

#启动从库
SHOW PROCESSLIST;
start slave;
show slave status \G
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2016-12-19更新-主从复制心跳和连接超时&#34;&gt;2016-12-19更新: 主从复制心跳和连接超时&lt;/h2&gt;

&lt;p&gt;实际运行过程中, 由于没有专门的人做运维, 从服务器也只是起备份作用, 偶尔发现从服务器已经没有跟主服务器同步, 数据滞后了很长时间了, 估计是跟公司网络环境不大稳定有关系.&lt;/p&gt;

&lt;p&gt;在网上了解到MySQL 5.5以上版本的主从复制还有一个心跳功能, 参考这里: &lt;a href=&#34;http://blog.csdn.net/JesseYoung/article/details/42914577&#34;&gt;MySQL运维-主从复制心跳&lt;/a&gt;. 果断打开心跳功能.&lt;/p&gt;

&lt;p&gt;连接从服务器, 执行下面指令配置心跳周期和连接超时:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; stop slave;
mysql&amp;gt; change master to master_heartbeat_period = 10;
mysql&amp;gt; set global slave_net_timeout = 25;
mysql&amp;gt; start slave;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以通过以下命令检查心跳状态:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -uUSER -pPASSWORD -hHOST -PPORT -e &amp;quot;show status like &#39;slave%&#39;;&amp;quot;
    +----------------------------+--------+
    | Variable_name              | Value  |
    +----------------------------+--------+
    | Slave_heartbeat_period     | 10.000 |
    | Slave_last_heartbeat       |        |
    | Slave_open_temp_tables     | 0      |
    | Slave_received_heartbeats  | 0      |
    | Slave_retried_transactions | 0      |
    | Slave_running              | ON     |
    +----------------------------+--------+
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MySQL配置文件参考</title>
      <link>http://hshsh.me/post/2016-04-05-mysql-configuration-notes/</link>
      <pubDate>Tue, 05 Apr 2016 14:48:25 +0800</pubDate>
      
      <guid>http://hshsh.me/post/2016-04-05-mysql-configuration-notes/</guid>
      <description>

&lt;p&gt;最近公式生产环境中使用MySQL做数据存储，把数据库跑起来不复杂，但是各种参数的设置调优可真是技术活。&lt;/p&gt;

&lt;p&gt;这是配置MySQL的学习笔记，大部分内容出自：&lt;a href=&#34;http://wsgzao.github.io/post/ltmp/&#34;&gt;http://wsgzao.github.io/post/ltmp/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mysql数据库配置&#34;&gt;MySQL数据库配置&lt;/h2&gt;

&lt;h3 id=&#34;mysql客户端配置&#34;&gt;MySQL客户端配置：&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[client]
# 客户端连接默认字符集
default-character-set = utf8
port = 3306
socket = /tmp/mysql.sock

[mysql]
#prompt=&amp;quot;(\u:HOSTNAME:)[\d]&amp;gt; &amp;quot;
#mysql提示符中显示当前用户、数据库、时间等信息
prompt=&amp;quot;\u@\h \R:\m:\s [\d]&amp;gt; &amp;quot;
#no-auto-rehash  # 自动补全功能，取消自动补全可以提高启动速度
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mysql服务端配置&#34;&gt;MySQL服务端配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[mysqld]
# 唯一的服务标识号，主从同步会涉及
server-id = 1
port = 3306
user = mysql
basedir = /app/local/mysql
datadir = /app/data/mysql/data
socket = /tmp/mysql.sock
log-error = /app/data/mysql/mysql_error.log
pid-file = /app/data/mysql/mysql.pid
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

# 默认存储引擎
default-storage-engine = InnoDB
# 设置最大并发连接数，如果前端程序是PHP，可适当加大，但不可过大。
# 如果前端程序采用连接池，可适当调小，避免连接数过大
max_connections = 512
# 最大连接错误次数，可适当加大，防止频繁连接错误后，前端host被mysql拒绝掉
max_connect_errors = 100000
# 所有线程所打开表的数量
table_open_cache = 512
# 不允许外部文件级别的锁. 打开文件锁会对性能造成负面影响
external-locking = FALSE
# 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小
max_allowed_packet = 32M
# 启用慢查询日志
slow_query_log = 1
slow_query_log_file = /app/data/mysql/slow.log
# MySQL打开的文件描述符限制
open_files_limit = 10240
# 操作系统在监听队列中所能保持的连接数
back_log = 600
# 每个连接都会分配的一些排序、连接等缓冲
sort_buffer_size = 16M
join_buffer_size = 16M
read_buffer_size = 16M
read_rnd_buffer_size = 16M
# 在cache中保留多少线程用于重用
thread_cache_size = 300
# 查询缓冲     
query_cache_size = 128M
# 只有小于此设定值的结果才会被缓冲     
query_cache_limit = 4M
# 设置查询缓存分配内存的最小单位
query_cache_min_res_unit = 2k
# 线程使用的堆大小
thread_stack = 512K
# 设置事务隔离级别为 READ-COMMITED，提高事务效率，通常都满足事务一致性要求
transaction_isolation = READ-COMMITTED
# 临时表的最大大小
tmp_table_size = 256M
# 独立的内存表所允许的最大容量
max_heap_table_size = 256M
# 设置慢查询阀值
long_query_time = 3
# 表示slave将复制事件写进自己的二进制日志
log-slave-updates
# 打开二进制日志功能
log-bin = /app/data/mysql/binlog/binlog
sync_binlog = 1
# 在一个事务中binlog为了记录SQL状态所持有的cache大小  
binlog_cache_size = 4M
# 设置混合模式
binlog_format = MIXED
# 表示的是binlog能够使用的最大cache 内存大小
max_binlog_cache_size = 8M
# binlog最大值
max_binlog_size = 1G
# 启用中继日志
relay-log-index = /app/data/mysql/relaylog/relaylog
relay-log-info-file = /app/data/mysql/relaylog/relaylog
relay-log = /app/data/mysql/relaylog/relaylog
# 设置了只保留7天binlog
expire_logs_days = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;myisam-相关选项&#34;&gt;MyISAM 相关选项&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;#关键词缓冲的大小, 一般用来缓冲MyISAM表的索引块
key_buffer_size = 128M
#排序缓存
read_rnd_buffer_size = 64M
#限制每个进程中缓冲树的字节数
bulk_insert_buffer_size = 256M
#MyISAM表发生变化时重新排序所需的缓冲
myisam_sort_buffer_size = 256M
#MySQL重建索引时所允许的最大临时文件的大小
myisam_max_sort_file_size = 10G
#如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们
myisam_repair_threads = 1
#自动检查和修复没有适当关闭的 MyISAM 表
myisam_recover
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;innodb-相关选项&#34;&gt;InnoDB 相关选项&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# InnoDB存储数据字典、内部数据结构的缓冲池，16MB 已经足够大了     
innodb_additional_mem_pool_size = 16M
# InnoDB用于缓存数据、索引、锁、插入缓冲、数据字典等
# 如果是专用的DB服务器，且以InnoDB引擎为主的场景，通常可设置物理内存的50%
# 如果是非专用DB服务器，可以先尝试设置成内存的1/4，如果有问题再调整
innodb_buffer_pool_size = 4G
# InnoDB共享表空间初始化大小，默认是 10MB，也非常坑X，改成 1GB，并且自动扩展
innodb_data_file_path = ibdata1:1G:autoextend
# 如果将此参数设置为1，将在每次提交事务后将日志写入磁盘，能较好保护数据可靠性。
# 为提供性能可以设置为0或2，但要承担在发生故障时丢失数据的风险
innodb_flush_log_at_trx_commit = 1
# InnoDB的log buffer，通常设置为 64MB 就足够了
innodb_log_buffer_size = 64M
# InnoDB redo log大小，通常设置256MB 就足够了
innodb_log_file_size = 256M
# InnoDB redo log文件组，通常设置为 2 就足够了
innodb_log_files_in_group = 2
# Buffer_Pool中Dirty_Page所占的数量，直接影响InnoDB的关闭时间
innodb_max_dirty_pages_pct = 90
# 启用InnoDB的独立表空间模式，便于管理
innodb_file_per_table = 1
# 控制innodb是否对gap加锁
innodb_locks_unsafe_for_binlog = 0
# 设置连接超时阀值，如果前端程序采用短连接，建议缩短这2个值
# 如果前端程序采用长连接，可直接注释掉这两个选项，是用默认配置(8小时)
interactive_timeout = 120
wait_timeout = 120
# 不再进行反解析(ip不反解成域名)，这样可以加快数据库的反应时间
skip-name-resolve
# 主从复制跳过错误
slave-skip-errors = 1032,1062,126,1114,1146,1048,1396
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其他配置选项&#34;&gt;其他配置选项&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[mysqldump]
# 不要在将内存中的整个结果写入磁盘之前缓存. 在导出非常巨大的表时需要此项
quick
max_allowed_packet = 32M
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://wsgzao.github.io/post/ltmp/&#34;&gt;LTMP手动编译安装以及全自动化部署实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/charset-configuration.html&#34;&gt;MySQL 5.7 Reference Manual: Character Set Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>