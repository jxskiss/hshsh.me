<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Pattern on hshsh&#39;s little site</title>
    <link>http://hshsh.me/tags/design-pattern/</link>
    <description>Recent content in Design Pattern on hshsh&#39;s little site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Apr 2016 23:30:00 +0800</lastBuildDate>
    
	<atom:link href="http://hshsh.me/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python代理类两例</title>
      <link>http://hshsh.me/post/2016-04-10-python-proxy-class-examples/</link>
      <pubDate>Sun, 10 Apr 2016 23:30:00 +0800</pubDate>
      
      <guid>http://hshsh.me/post/2016-04-10-python-proxy-class-examples/</guid>
      <description>最近遇到MySQL的连接断开，MySQLdb报&amp;rsquo;(2006, MySQL server has gone away.)&amp;lsquo;错误的问题。
问题发生的环境是，客户端使用了长连接，程序启动的时候使用MySQLdb模块的connect方法建立一个数据库连接，程序运行期间一直使用这个连接。对于请求比较多的服务程序来说，这个方法不会出现问题，因为MySQL默认连接超时的时间设定是8小时，所以连接不会超时断开，也就不会报这个错误了。但是作为一个调试服务，请求频率可能低于8小时，就导致错误了。
由于不想修改很多具体实现的代码，所以使用代理类的方法对这个程序打了个补丁解决问题。
另外 SQLAlchemy 中的 scoped_session 也是一个代理类，实现也很有意思，这里一起分享一下这两个代理类。
MySQLdb Connection 代理类 先看看出问题的代码：
import MySQLdb conn = MySQLdb.connect(host=&#39;host&#39;, port=&#39;port&#39;, user=&#39;user&#39;, passwd=&#39;passwd&#39;, db=&#39;db&#39;) def use_mysql(): cursor = conn.cursor() cursor.execute(&#39;do something with mysql database;&#39;) cursor.close()  MySQLdb.connect函数返回的是一个Connection对象，当操作频率大于8个小时的时候，MySQL服务器就会关闭连接，然后下一次执行 cursor = conn.cursor() 的时候，就会报连接丢失的错误。为了既使用长连接，又能避免这个错误，我们可以封装一个Connection类的代理类，重载 cursor 方法，当有新的请求的时候，先检查连接是否还在，如果连接丢失的话，就重新连接数据库，然后再调用 Connection 类的 cursor 方法并返回结果：
import MySQLdb from MySQLdb.connections import Connection class ProxyConnection(Connection): def __init__(self, *args, **kwargs): # 保存数据库连接参数以备丢失时候重新连接 self._proxy_args = args self._proxy_kwargs = kwargs super(ProxyConnection, self).</description>
    </item>
    
  </channel>
</rss>